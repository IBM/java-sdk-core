/**
 * (C) Copyright IBM Corp. 2015, 2019.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

package com.ibm.cloud.sdk.core.test.model;

import com.google.common.collect.Sets;
import com.google.gson.JsonSyntaxException;
import com.ibm.cloud.sdk.core.service.model.DynamicModel;
import com.ibm.cloud.sdk.core.test.model.generated.Foo;
import com.ibm.cloud.sdk.core.test.model.generated.ModelAPFoo;
import com.ibm.cloud.sdk.core.test.model.generated.ModelAPFooBad;
import com.ibm.cloud.sdk.core.test.model.generated.ModelAPFooCtorExcp;
import com.ibm.cloud.sdk.core.test.model.generated.ModelAPFooNoCtor;
import com.ibm.cloud.sdk.core.test.model.generated.ModelAPFooNullTypeToken;
import com.ibm.cloud.sdk.core.test.model.generated.ModelAPInteger;
import com.ibm.cloud.sdk.core.test.model.generated.ModelAPObject;
import com.ibm.cloud.sdk.core.test.model.generated.ModelAPProtectedCtor;
import com.ibm.cloud.sdk.core.test.model.generated.ModelAPString;
import com.ibm.cloud.sdk.core.util.GsonSingleton;
import org.testng.annotations.Test;

import java.util.Map;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertFalse;
import static org.testng.Assert.assertNotNull;
import static org.testng.Assert.assertNull;
import static org.testng.Assert.assertTrue;

/**
 * This class contains tests of our DynamicModelTypeAdapterFactory.
 * The test data consists of a few dynamic models that were generated by the java generator
 * and then copied here to this project.
 */
public class DynamicModelSerializationTest {
  private boolean displayOutput = false;

  private String serialize(Object obj) {
    return GsonSingleton.getGson().toJson(obj);
  }

  private <T> T deserialize(String json, Class<T> clazz) {
    return GsonSingleton.getGson().fromJson(json, clazz);
  }

  private <T> void testSerDeser(DynamicModel<?> model, Class<T> clazz) {
    String jsonString = serialize(model);
    if (displayOutput) {
      System.out.println("serialized " + model.getClass().getSimpleName() + ": " + jsonString);
    }
    T newModel = deserialize(jsonString, clazz);
    if (displayOutput) {
      System.out.println("de-serialized " + model.getClass().getSimpleName() + ": " + newModel.toString());
    }
    assertEquals(newModel, model);
  }

  private ModelAPFoo createModelAPFoo() {
    Foo foo1 = createFoo("1B", 44);
    Foo foo2 = createFoo("LT", 74);
    ModelAPFoo model = new ModelAPFoo();
    model.setProp1("value1");
    model.setProp2(Long.valueOf(33));
    model.put("baseball", foo1);
    model.put("football", foo2);
    return model;
  }

  private ModelAPFooNullTypeToken createModelAPFooNullTypeToken() {
    Foo foo1 = createFoo("1B", 44);
    Foo foo2 = createFoo("LT", 74);
    ModelAPFooNullTypeToken model = new ModelAPFooNullTypeToken();
    model.setProp1("value1");
    model.setProp2(Long.valueOf(33));
    model.put("baseball", foo1);
    model.put("football", foo2);
    return model;
  }

  private ModelAPFooNoCtor createModelAPFooNoCtor() {
    Foo foo1 = createFoo("1B", 44);
    Foo foo2 = createFoo("LT", 74);
    ModelAPFooNoCtor model = new ModelAPFooNoCtor("x");
    model.setProp1("value1");
    model.setProp2(Long.valueOf(33));
    model.put("baseball", foo1);
    model.put("football", foo2);
    return model;
  }

  private ModelAPFooBad createModelAPFooBad() {
    Foo foo1 = createFoo("1B", 44);
    Foo foo2 = createFoo("LT", 74);
    ModelAPFooBad model = new ModelAPFooBad();
    model.setProp1("value1");
    model.setProp2(Long.valueOf(33));
    model.put("baseball", foo1);
    model.put("football", foo2);
    return model;
  }

  private ModelAPInteger createModelAPInteger() {
    ModelAPInteger model = new ModelAPInteger();
    model.setProp1("value1");
    model.setProp2(Long.valueOf(33));
    model.put("baseball", Long.valueOf(44));
    model.put("football", Long.valueOf(74));
    return model;
  }

  private ModelAPString createModelAPString() {
    ModelAPString model = new ModelAPString();
    model.setProp1("value1");
    model.setProp2(Long.valueOf(33));
    model.put("baseball", "C");
    model.put("football", "LT");
    return model;
  }

  private ModelAPProtectedCtor createModelAPProtectedCtor() {
    ModelAPProtectedCtor model = new ModelAPProtectedCtor("x");
    model.setProp1("value1");
    model.setProp2(Long.valueOf(33));
    model.put("baseball", "C");
    model.put("football", "LT");
    return model;
  }

  private Foo createFoo(String foo, int bar) {
    Foo fooModel = new Foo();
    fooModel.setFoo(foo);
    fooModel.setBar(bar);
    return fooModel;
  }

  private ModelAPObject createModelAPObject() {
    Foo foo1 = createFoo("1B", 44);
    Foo foo2 = createFoo("LT", 74);
    ModelAPObject model = new ModelAPObject();
    model.setProp1("value1");
    model.setProp2(Long.valueOf(33));
    model.put("baseball", foo1);
    model.put("football", foo2);
    model.put("basketball", "PF");
    model.put("age", Integer.valueOf(25));
    return model;
  }

  @Test
  public void testModelAPFoo() {
    ModelAPFoo model = createModelAPFoo();
    // model.put("basketball", "foo");
    testSerDeser(model, ModelAPFoo.class);
  }

  @Test
  public void testAlternatePropertyNames() {
    ModelAPFoo model = createModelAPFoo();

    String jsonString = serialize(model);

    String alternateJson = jsonString.replaceAll("prop1", "property1").replaceAll("prop2", "property2");
    ModelAPFoo newModel = deserialize(alternateJson, ModelAPFoo.class);
    assertEquals(newModel, model);

    alternateJson = jsonString.replaceAll("prop1", "p1").replaceAll("prop2", "p2");
    newModel = deserialize(alternateJson, ModelAPFoo.class);
    assertEquals(newModel, model);
  }

  @Test(expectedExceptions = {IllegalArgumentException.class})
  public void testBadModel() {
    // This model class has incorrect annotations that mimic a duplicate field error, similar to
    // a situation where both a superclass and a subclass might define the same field.
    // When we detect this, we must throw an exception because we can't correctly deserialize instances of the model.
    ModelAPFooBad model = createModelAPFooBad();

    // We just need to try to serialize the model instance to trigger the exception.
    serialize(model);
  }

  @Test(expectedExceptions = {UnsupportedOperationException.class})
  public void testNoCtor() {
    // This model class doesn't have a public default (no-arg) ctor, which should trigger an exception.
    ModelAPFooNoCtor model = createModelAPFooNoCtor();

    // We just need to try to serialize the model instance to trigger the exception.
    serialize(model);
  }

  @Test
  public void testNullValues() {
    ModelAPFoo model = createModelAPFoo();
    model.setProp1(null);
    // model.put("basketball", "foo");
    testSerDeser(model, ModelAPFoo.class);
  }

  @Test(expectedExceptions = {JsonSyntaxException.class})
  public void testBadDeser() {

    // Obtain the json string and then render it incorrect to trigger a deserialization error.
    ModelAPFoo model = createModelAPFoo();
    String goodJson = serialize(model);
    if (displayOutput) System.out.println("Serialized ModelAPFoo: " + goodJson);
    String badJson = goodJson.replaceAll("foo", "FOO").replaceAll("prop2", "var2");
    if (displayOutput) System.out.println("Incorrect JSON: " + badJson);

    // We just need to try to deserialize the bad JSON string to trigger the exception.
    deserialize(badJson, ModelAPFoo.class);
  }

  @Test(expectedExceptions = {JsonSyntaxException.class})
  public void testCtorExcp() {

    // Obtain a json string of a ModelAPFoo instance, then try to deserialize it as a ModelAPFooCtorExcp object.
    ModelAPFoo model = createModelAPFoo();
    String json = serialize(model);

    // We just need to try to deserialize the JSON string to trigger the exception.
    // The ModelAPFooCtorExcp class can't be instantiated since it's ctor throws an NPE.
    // This should result in Gson catching the IOException from our adapter,
    // then re-throwing as a JsonSyntaxException.
    deserialize(json, ModelAPFooCtorExcp.class);
  }

  @Test
  public void testModelAPInteger() {
    ModelAPInteger model = createModelAPInteger();
    // model.put("basketball", "foo");
    testSerDeser(model, ModelAPInteger.class);
  }

  @Test
  public void testModelAPObject() {
    ModelAPObject model = createModelAPObject();
    testSerDeser(model, ModelAPObject.class);
  }

  @Test
  public void testModelAPString() {
    ModelAPString model = createModelAPString();
    // model.put("basketball", Integer.valueOf(33));
    testSerDeser(model, ModelAPString.class);
  }

  @Test
  public void testModelAPFooNullTypeToken() {
    ModelAPFooNullTypeToken model = createModelAPFooNullTypeToken();
    testSerDeser(model, ModelAPFooNullTypeToken.class);
  }

  @Test
  public void testModelAPFooNull() {
    String jsonString = "null";
    ModelAPFoo model = deserialize(jsonString, ModelAPFoo.class);
    assertNull(model);
  }

  @Test
  public void testModelAPProtectedCtor() {
    ModelAPProtectedCtor model = createModelAPProtectedCtor();
    // model.put("basketball", Integer.valueOf(33));
    testSerDeser(model, ModelAPProtectedCtor.class);
  }

  @Test(expectedExceptions = {JsonSyntaxException.class}, expectedExceptionsMessageRegExp="Duplicate key: baseball")
  public void testModelAPFooDuplicateKey() {
    // Serialize a ModelAPFoo instance
    ModelAPFoo model = createModelAPFoo();
    String json = serialize(model);

    // Modify the json string to make it look like there are duplicate additional properties stored in the map.
    String badJson = json.replaceAll("football", "baseball");

    // Trigger the exception by trying to deserialize the bad json string.
    deserialize(badJson, ModelAPFoo.class);
  }

  @Test
  public void testDynamicModelMethods() {
    // This test will exercise some of the DynamicModel methods
    // dealing with additional properties.
    ModelAPFoo model = createModelAPFoo();
    assertEquals(model.getPropertyNames(), Sets.newHashSet("baseball", "football"));

    Foo foo = model.get("baseball");
    assertNotNull(foo);
    model.put("baseball2", foo);
    assertEquals(model.getPropertyNames(), Sets.newHashSet("baseball", "football", "baseball2"));

    Foo newFoo = createFoo("1B", 44);
    Foo previous = model.put("baseball", newFoo);
    assertNotNull(previous);

    Map<String, Foo> props = model.getProperties();
    assertNotNull(props);
    assertFalse(props.isEmpty());
    assertEquals(props.size(), 3);

    model.removeProperty("baseball2");
    assertEquals(model.getPropertyNames(), Sets.newHashSet("baseball", "football"));

    ModelAPFoo newModel = deserialize(serialize(model), ModelAPFoo.class);
    assertEquals(newModel, model);

    assertTrue(model.equals(model));
    assertFalse(model.equals(null));
    assertFalse(model.equals(this));

    assertTrue(model.hashCode() != 0);

    model.removeProperties();
    assertEquals(model.getProperties().size(), 0);
  }
}
